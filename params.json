{"name":"Beaqlejs","tagline":"*BeaqleJS* provides a framework to create browser based listening tests and is purely based on open web standards like HTML5 and Javascript.","body":" BeaqleJS\r\n=====================\r\n\r\nDescription\r\n---------------------\r\n\r\nBeaqleJS provides a framework to create browser based listening tests and is purely based on open web standards like HTML5 and Javascript. Therefore, the test runs in any modern web browser and allows an easy distribution of the test environment to a significant amount of participants in combination with simple configuration. Currently it supports ABX and MUSHRA style test procedures but can be easily extended to other test schemes.\r\n\r\nTo get a better impression about its functionality there are two demo test sites for the ABX and MUSHRA test classes:\r\n\r\n* http://hsu-ant.github.io/beaqlejs/demo/abx/\r\n* http://hsu-ant.github.io/beaqlejs/demo/mushra/\r\n\r\nBeaqleJS has been presented at the [Linux Audio Conference 2014](http://lac.linuxaudio.org/2014/) at the ZKM in Karlsruhe, Germany. The [paper](http://lac.linuxaudio.org/2014/papers/26.pdf) and presentation [slides](http://lac.linuxaudio.org/2014/download/SKraft_BeaqleJS.pdf) are available from the conference archive.\r\n\r\nIf you want to cite BeaqleJS in your publications please use\r\n\r\n    S. Kraft, U. ZÃ¶lzer: \"BeaqleJS: HTML5 and JavaScript based Framework for the Subjective Evaluation of Audio Quality\", Linux Audio Conference, 2014, Karlsruhe, Germany\r\n\r\nas a reference or link to our GitHub repository\r\n    \r\n    https://github.com/HSU-ANT/beaqlejs\r\n\r\n\r\nBasic Setup\r\n---------------------\r\n\r\n1. Download the test scripts\r\n   - you can either clone the git repository `git clone https://github.com/HSU-ANT/beaqlejs.git`\r\n   - or simply download a zip of the current HEAD revision at `https://github.com/HSU-ANT/beaqlejs/archive/master.zip`\r\n   - or choose an older release at `https://github.com/HSU-ANT/beaqlejs/releases`\r\n\r\n2. Uncomment the line where the desired test class is initialized and loaded in the header of the `index.html` file.\r\n\r\n        <script type=\"text/javascript\">\r\n            var testHandle;\r\n            window.onload=function() {\r\n                // Uncomment one of the following lines to choose the desired test class\r\n                //testHandle = new MushraTest(TestConfig);  // <= MUSHRA test class\r\n                //testHandle = new AbxTest(TestConfig);     // <= ABX test class\r\n            };\r\n        </script>\r\n\r\n3. Prepare a config file and set its path in the prepared `<script></script>` tag in the header of the `index.html` file.\r\n\r\n        <!-- load the test config file -->\r\n            <script src=\"config/YOUR_CONFIG.js\" type=\"text/javascript\"></script>\r\n        <!---->\r\n    Two example config files for the MUSHRA and ABX test class are already supplied in the `config/` folder to serve as a starting point. Detailed information about the different test classes and configuration can be found below.\r\n\r\n\r\nTest Configuration \r\n---------------------\r\n\r\n### General Options ###\r\n\r\nThe available options can be dividided into a set of general options whitch apply to all test classes and other options, including file declarations, that are specific for a single test class.\r\n\r\n    var TestConfig = {\r\n        \"TestName\": \"ABX Demo Test\",            // <=  Name of the test\r\n        \"LoopByDefault\": true,                  // <=  Enable looped playback by default\r\n        \"ShowFileIDs\": false,                   // <=  Show file IDs for debugging (never enabled during real test!)\r\n        \"EnableABLoop\": true,                   // <=  Show controls to loop playback with an AB range slider\r\n        \"EnableOnlineSubmission\": false,        // <=  Enable transmission of JSON encoded results to a web service\r\n        \"BeaqleServiceURL\": \"\",                 // <=  URL of the web service\r\n        \"SupervisorContact\": \"\",                // <=  Email adress of supervisor to contact for help\r\n        \"RandomizeTestOrder\": true,             // <=  Present test sets in a random order\r\n        \"MaxTestsPerRun\": 3,                    // <=  \r\n        \"Testsets\": [ {...}, {...}, ... ],      // <=  Definition of test sets and files, more details below\r\n    }\r\n\r\n\r\n### ABX ###\r\n\r\nIn an ABX test three items named A, B and X are presented to the listener, whereas X is randomly selected to be either the same as A or B. The listener has to identify which item is hidden behind X, or which one (A or B) is closest to X. If the listener is able to find the correct item, it reveals that there are perceptual differences between A and B. \r\n\r\nA typical application of ABX tests would be the evaluation of the transparency of audio codecs. For example item A could be an unencoded audio snippet and B is the same snippet but encoded with a lossy codec. When the listener is not able to identify if A or B was hidden in X (results are randomly distributed), one can assume that the audio coding was transparent\r\n    \r\n    ...                                         // <=  General options\r\n    \"Testsets\": [\r\n        { \"Name\": \"Schubert\",                   // <=  Name of the test set\r\n          \"Files\": {                            // <=  Array with test files\r\n            \"A\": \"audio/schubert_ref.wav\",      // <=  File A\r\n            \"B\": \"audio/schubert_2.wav\",        // <=  File B\r\n            }\r\n        },\r\n        { ... },                                // <=  Next test set starts here\r\n        ....\r\n    ]\r\n\r\n### MUSHRA ###\r\n\r\nIn a MUSHRA test (ITU-R BS.1116-1) the listener gets presented an item marked as reference together with several anonymous test items. By using a slider for each test item he has to rate how close the items are to the reference on top. Among the test items there is usually also one hidden reference and one, or several, anchor signals to prove the validity of the ratings and the qualification of the participants.\r\n\r\nContrary to ABX tests the MUSHRA procedure allows more detailed evaluations as it is possible to compare more than one algorithm to a reference. Furthermore, the results are on a continuous scale allowing a direct numerical comparison of all algorithms under test.\r\n\r\n    ...                                         // <=  General options\r\n    \"RateMinValue\": 0,                          // <=  Minimum rating\r\n    \"RateMaxValue\": 100,                        // <=  Maximum rating\r\n    \"RateDefaultValue\":0,                       // <=  Default rating\r\n    \"Testsets\": [\r\n        { \"Name\": \"Schubert 1\",                 // <=  Name of the test set\r\n          \"TestID\": \"id1_1\",                    // <=  Unique test set ID, necessary for internal referencing\r\n          \"Files\": {                            // <=  Array with test files\r\n            \"Reference\": \"audio/ref.wav\",       // <=  Every MUSHRA test set needs exactly one(!) file with a \"Reference\" label\r\n            \"label_1\": \"audio/algo_1.wav\",      // <=  Various files to be tested, the labels can be freely chosen as desired\r\n            \"label_2\": \"audio/algo_2.wav\",      //      but have to be unique inside a test set\r\n            \"label_3\": \"audio/algo_3.wav\",      //      ...\r\n            \"anchor\": \"audio/algo_anch.wav\",    //      ...\r\n            }\r\n        },\r\n        { ... },                                // <=  Next test set starts here\r\n        ....\r\n    ]\r\n\r\n\r\n\r\nContact\r\n---------------------\r\n\r\nhttp://hsu-ant.github.io/beaqlejs\r\n\r\nskraft (AT) hsu-hh.de\r\n\r\n\r\nLicense\r\n---------------------\r\n\r\nThe complete sources, html and script files as well as images are released unter the *GPLv3 \r\nlicense*. A copy of the GPL is provided in the `LICENSE.txt` file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}